import { IterableDiffers, Directive, EventEmitter, Output, Input } from '@angular/core';
export class ngfFormData {
    constructor(IterableDiffers) {
        this.postName = "file";
        this.FormData = new FormData();
        this.FormDataChange = new EventEmitter();
        this.differ = IterableDiffers.find([]).create();
    }
    ngDoCheck() {
        var changes = this.differ.diff(this.files);
        if (changes) {
            setTimeout(() => this.buildFormData(), 0);
        }
    }
    buildFormData() {
        const isArray = typeof (this.files) === 'object' && this.files.constructor === Array;
        if (isArray) {
            this.FormData = new FormData();
            const files = this.files || [];
            files.forEach(file => this.FormData.append(this.postName, file, this.fileName || file.name));
            this.FormDataChange.emit(this.FormData);
        }
        else {
            delete this.FormData;
        }
    }
}
ngfFormData.decorators = [
    { type: Directive, args: [{ selector: 'ngfFormData' },] }
];
ngfFormData.ctorParameters = () => [
    { type: IterableDiffers }
];
ngfFormData.propDecorators = {
    files: [{ type: Input }],
    postName: [{ type: Input }],
    fileName: [{ type: Input }],
    FormData: [{ type: Input }],
    FormDataChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdmRm9ybURhdGEuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uL3NyYy8iLCJzb3VyY2VzIjpbImZpbGUtdXBsb2FkL25nZkZvcm1EYXRhLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsZUFBZSxFQUNmLFNBQVMsRUFBRSxZQUFZLEVBQ3ZCLE1BQU0sRUFBRSxLQUFLLEVBQ2QsTUFBTSxlQUFlLENBQUM7QUFHdkIsTUFBTSxPQUFPLFdBQVc7SUFVdEIsWUFBWSxlQUFnQztRQVJuQyxhQUFRLEdBQVUsTUFBTSxDQUFBO1FBR3hCLGFBQVEsR0FBWSxJQUFJLFFBQVEsRUFBRSxDQUFBO1FBQ2pDLG1CQUFjLEdBQTBCLElBQUksWUFBWSxFQUFFLENBQUE7UUFLbEUsSUFBSSxDQUFDLE1BQU0sR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFBO0lBQ2pELENBQUM7SUFFRCxTQUFTO1FBQ1AsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUUsSUFBSSxDQUFDLEtBQUssQ0FBRSxDQUFDO1FBRTdDLElBQUksT0FBTyxFQUFFO1lBQ1gsVUFBVSxDQUFDLEdBQUUsRUFBRSxDQUFBLElBQUksQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtTQUN4QztJQUNILENBQUM7SUFFRCxhQUFhO1FBQ1gsTUFBTSxPQUFPLEdBQUcsT0FBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBRyxRQUFRLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEtBQUcsS0FBSyxDQUFBO1FBRS9FLElBQUksT0FBTyxFQUFFO1lBQ1gsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFBO1lBQzlCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFBO1lBQzlCLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFBLEVBQUUsQ0FDbEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsSUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQ3BFLENBQUE7WUFDRCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBRSxJQUFJLENBQUMsUUFBUSxDQUFFLENBQUE7U0FDMUM7YUFBSTtZQUNILE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQTtTQUNyQjtJQUNILENBQUM7OztZQXBDRixTQUFTLFNBQUMsRUFBQyxRQUFRLEVBQUUsYUFBYSxFQUFDOzs7WUFMbEMsZUFBZTs7O29CQU9kLEtBQUs7dUJBQ0wsS0FBSzt1QkFDTCxLQUFLO3VCQUVMLEtBQUs7NkJBQ0wsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEl0ZXJhYmxlRGlmZmVyLFxuICBJdGVyYWJsZURpZmZlcnMsXG4gIERpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLFxuICBPdXRwdXQsIElucHV0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtzZWxlY3RvcjogJ25nZkZvcm1EYXRhJ30pXG5leHBvcnQgY2xhc3MgbmdmRm9ybURhdGEge1xuICBASW5wdXQoKSBmaWxlcyAhOiBGaWxlW11cbiAgQElucHV0KCkgcG9zdE5hbWU6c3RyaW5nID0gXCJmaWxlXCJcbiAgQElucHV0KCkgZmlsZU5hbWUgITogc3RyaW5nLy9mb3JjZSBmaWxlIG5hbWVcblxuICBASW5wdXQoKSBGb3JtRGF0YTpGb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpXG4gIEBPdXRwdXQoKSBGb3JtRGF0YUNoYW5nZTpFdmVudEVtaXR0ZXI8Rm9ybURhdGE+ID0gbmV3IEV2ZW50RW1pdHRlcigpXG5cbiAgZGlmZmVyOkl0ZXJhYmxlRGlmZmVyPHt9PlxuXG4gIGNvbnN0cnVjdG9yKEl0ZXJhYmxlRGlmZmVyczogSXRlcmFibGVEaWZmZXJzKXtcbiAgICB0aGlzLmRpZmZlciA9IEl0ZXJhYmxlRGlmZmVycy5maW5kKFtdKS5jcmVhdGUoKVxuICB9XG5cbiAgbmdEb0NoZWNrKCl7XG4gICAgdmFyIGNoYW5nZXMgPSB0aGlzLmRpZmZlci5kaWZmKCB0aGlzLmZpbGVzICk7XG5cbiAgICBpZiAoY2hhbmdlcykge1xuICAgICAgc2V0VGltZW91dCgoKT0+dGhpcy5idWlsZEZvcm1EYXRhKCksIDApXG4gICAgfVxuICB9XG5cbiAgYnVpbGRGb3JtRGF0YSgpe1xuICAgIGNvbnN0IGlzQXJyYXkgPSB0eXBlb2YodGhpcy5maWxlcyk9PT0nb2JqZWN0JyAmJiB0aGlzLmZpbGVzLmNvbnN0cnVjdG9yPT09QXJyYXlcblxuICAgIGlmKCBpc0FycmF5ICl7XG4gICAgICB0aGlzLkZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKClcbiAgICAgIGNvbnN0IGZpbGVzID0gdGhpcy5maWxlcyB8fCBbXVxuICAgICAgZmlsZXMuZm9yRWFjaChmaWxlPT5cbiAgICAgICAgdGhpcy5Gb3JtRGF0YS5hcHBlbmQodGhpcy5wb3N0TmFtZSwgZmlsZSwgdGhpcy5maWxlTmFtZXx8ZmlsZS5uYW1lKVxuICAgICAgKVxuICAgICAgdGhpcy5Gb3JtRGF0YUNoYW5nZS5lbWl0KCB0aGlzLkZvcm1EYXRhIClcbiAgICB9ZWxzZXtcbiAgICAgIGRlbGV0ZSB0aGlzLkZvcm1EYXRhXG4gICAgfVxuICB9XG59Il19